schema {
  query: Query
  mutation: Mutation
}

"Suche nach Daten von Songs"
type Query {
  "Suche Daten von Songs anhand der ID"
  song(id: ID!): Song
  "Suche Daten von Songs anhand des Titels oder des Genres"
  songs(input: Suchkriterien): [Song!]
}

type Mutation {
  "Einen neuen Song-Datensatz anlegen"
  create(input: SongInput!): CreatePayload
}

"Eigenschaften eines Kunde-Datensatzes"
type Song {
  id: ID
  titel: String!
  erscheinungsDatum: String!
  songGenre: [GenreType]
  musikLabel: String
  duration: SongDuration!
  interpretId: String
}

"Dauer eines Songs"
type SongDuration {
  "Stunden in der Zeitdauer eines Songs"
  hours: Int!
  "Minuten in der Zeitdauer eines Songs"
  minutes: Int!
  "Sekunden in der Zeitdauer eines Songs"
  seconds: Int!
}

"Suchkriterien für songs"
input Suchkriterien {
  "Titel des gesuchten Songs"
  titel: String
  "Name eines Labels"
  musikLabel: String
}

"Eingabedaten für einen neuen Song"
input SongInput {
  "Titel des neuen Songs"
  titel: String!
  "Datum an dem ein Song erschienen ist"
  erscheinungsDatum: String!
  "Genre eines Songs"
  songGenre: [String!]
  "Zu einem Song gehöriges Label"
  musikLabel: String
  "Zeitdauer eines Songs"
  duration: DurationInput!
  "Id eines Interpreten"
  interpretId: String
}

"Aufzählungstyp für ein Song-Genre"
enum GenreType {
  POP
  DANCEPOP
  PUNKROCK
  NEUEDEUTSCHEWELLE
  KINDERMUSIK
  RAP
  FOLK
}

"Eingabedaten für eine neue Song-Dauer"
input DurationInput {
  hours: Int!
  minutes: Int!
  seconds: Int!
}

"Rückgabetyp beim Neuanlegen eines Songs"
type CreatePayload {
  "ID des neu angelegten Songs"
  id: String!
}
