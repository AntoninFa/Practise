# Copyright (C) 2023 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Aufruf:   docker compose up [postgres pgadmin]
#           docker compose down

# https://docs.docker.com/compose/compose-file
# https://docs.docker.com/compose/compose-file/compose-file-v3

# https://docs.docker.com/compose/compose-file/05-services
services:
  # ------------------------------------------------------------------------------------
  # P o s t g r e S Q L
  # ------------------------------------------------------------------------------------

  # https://stackoverflow.com/questions/76345884/how-to-select-specific-services-of-docker-compose-when-using-spring-boot-docker
  # https://docs.docker.com/compose/profiles
  # https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.docker-compose.profiles

  postgres:
    image: postgres:15.3-bullseye
    ports:
      - published: 5432
        target: 5432
        protocol: tcp
    # https://docs.docker.com/compose/profiles
    profiles: [ postgres ]
    # https://docs.docker.com/compose/networking
    networks: [ song-network ]
    volumes:
      - type: bind
        source: C:/Zimmermann/volumes/postgres/data
        target: /var/lib/postgresql/data
      - type: bind
        source: C:/Zimmermann/volumes/postgres/postgresql.conf
        target: /etc/postgresql/postgresql.conf
        read_only: true
      - type: bind
        source: C:/Zimmermann/volumes/postgres/tablespace
        target: /var/lib/postgresql/tablespace
      - type: bind
        source: C:/Zimmermann/volumes/postgres/sql
        target: /sql
        read_only: true
    # https://docs.docker.com/compose/environment-variables/set-environment-variables
    environment:
      - POSTGRES_PASSWORD=p
      - TZ=Europe/Berlin
      - PGTZ=Europe/Berlin
      #PGDATA: /var/lib/postgresql/data
      # https://www.postgresql.org/docs/current/auth-trust.html
      #POSTGRES_HOST_AUTH_METHOD: trust
    user: "postgres:postgres"
    security_opt:
      - label:user:postgres
      - no-new-privileges:true
    container_name: postgres
    hostname: postgres
    healthcheck:
      test:
        [
          CMD,
          pg_isready,
          --dbname,
          postgres,
          --username,
          postgres
        ]
      interval: 5s
      timeout: 2s
      start_period: 5s
    # https://docs.docker.com/compose/compose-file/deploy
    deploy:
      # https://docs.docker.com/compose/compose-file/deploy/#resources
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M

  # ------------------------------------------------------------------------------------
  # p g a d m i n
  # ------------------------------------------------------------------------------------
  # http://localhost:8888 mit Emailadresse "pgadmin@acme.com" und Passwort "p"
  pgadmin:
    image: dpage/pgadmin4:7.2
    ports:
      - published: 8888
        target: 80
        protocol: tcp
    profiles: [ postgres ]
    networks: [ song-network ]
    volumes:
      - type: bind
        source: C:/Zimmermann/volumes/postgres/pgadmin
        # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
        target: /var/lib/pgadmin
      - type: bind
        source: C:/Zimmermann/volumes/postgres/pgadmin4
        target: /var/lib/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=pgadmin@acme.com
      - PGADMIN_DEFAULT_PASSWORD=p
    user: "pgadmin:5050"
    container_name: pgadmin
    hostname: pgadmin
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G


  # ------------------------------------------------------------------------------------
  # k u n d e
  # ------------------------------------------------------------------------------------
  kunde:
    image: juergenzimmermann/kunde:2023.1.1
    #image: juergenzimmermann/kunde:2023.1.1-jammy
    #image: juergenzimmermann/kunde:2023.1.1-ubi9
    depends_on:
      postgres:
      #mysql:
      #oracle:
        condition: service_healthy
    ports:
      #- published: 8080-8081
      - published: 8080
        target: 8080
        protocol: tcp
    # https://docs.docker.com/compose/profiles
    profiles: [ kunde ]
    # https://docs.docker.com/compose/networking
    networks: [ song-network ]
    volumes:
      - type: bind
        source: src\main\resources\application.container.yml
        target: /workspace/BOOT-INF/classes/application.yml
        read_only: true
      - type: bind
        source: C:\Zimmermann\volumes\kunde-v2
        target: /tmp
    # https://docs.docker.com/compose/environment-variables/set-environment-variables
    env_file: [ docker-compose.env ]
    hostname: kunde
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#cap_add-cap_drop
    cap_drop: [ ALL ]
    deploy:
      # https://docs.docker.com/compose/compose-file/deploy/#resources
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 768M
      # https://docs.docker.com/compose/compose-file/deploy/#replicas
      #replicas: 2
      #endpoint_mode: vip

# https://docs.docker.com/compose/compose-file/06-networks
networks:
  song-network: {}
