### Einen neuen Kunden anlegen
GRAPHQL {{graphqlUrl}}

mutation {
  create(
    input: {
      nachname: "Graphql"
      email: "graphql@graphql.de"
      kategorie: 1
      hasNewsletter: true
      geburtsdatum: "2022-02-01"
      homepage: "https://graphql.de"
      geschlecht: WEIBLICH
      familienstand: LEDIG
      adresse: {
        plz: "99999"
        ort: "Graphqlort"
      }
      umsaetze: [{
        betrag: "200"
        waehrung: "EUR"
      }]
      interessen: [SPORT, REISEN]
    }
  ) {
    id
  }
}
> {%
    client.test('Mutation neuer Kunde: OK', () => {
        const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('Mutation neuer Kunde: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('Mutation neuer Kunde: body mit Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        // TODO Optional Chaining
        const create = body.data.create;
        client.assert(typeof create === 'object', `data: ${JSON.stringify(body.data)}`);
        const id = create.id;
        client.assert(typeof id === 'string', `create: ${JSON.stringify(create)}`);
    });
%}

### Einen neuen Kunden mit fehlerhaften Daten anlegen
GRAPHQL {{graphqlUrl}}

mutation {
  create(
    input: {
      nachname: "?!:"
      email: "email@"
      kategorie: 11
      hasNewsletter: true
      geburtsdatum: "2022-02-01"
      homepage: "https://graphql.de"
      geschlecht: WEIBLICH
      familienstand: LEDIG
      adresse: {
        plz: "1234"
        ort: ""
      }
      umsaetze: [{
        betrag: "1"
        waehrung: "EUR"
      }]
      interessen: [SPORT, SPORT]
    }
  ) {
    id
  }
}
> {%
    client.test('Mutation neuer Kunde mit fehlerhaften Daten: OK', () => {
        const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('Mutation neuer Kunde mit fehlerhaften Daten: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('Mutation neuer Kunde mit fehlerhaften Daten: body mit Errors ohne Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        client.assert(typeof body.data === 'object', `body: ${JSON.stringify(body)}`);
        client.assert(Object.keys(body.data).length === 0, `data: ${JSON.stringify(body.data)}`);
        // TODO Optional Chaining
        const errors = body.errors;
        client.assert(Array.isArray(errors) === true, `errors: ${JSON.stringify(body.errors)}`);
                client.assert(errors.length > 0, `errors: ${JSON.stringify(body.errors)}`);
                client.assert(typeof errors[0].extensions.classification === 'string', `errors: ${JSON.stringify(errors)}`);
                client.assert(errors[0].extensions.classification === 'BAD_REQUEST', `errors: ${JSON.stringify(errors)}`);
        errors.map(error => error.extensions.classification)
            .forEach(classification => client.assert(classification === 'BAD_REQUEST', `classification: ${JSON.stringify(classification)}`));
    });
%}

### Einen neuen Kunden mit existierender Emailadresse anlegen
GRAPHQL {{graphqlUrl}}

mutation {
  create(
    input: {
      nachname: "Graphql"
      email: "alpha@acme.de"
      kategorie: 1
      hasNewsletter: true
      geburtsdatum: "2022-02-01"
      homepage: "https://graphql.de"
      geschlecht: WEIBLICH
      familienstand: LEDIG
      adresse: {
        plz: "99999"
        ort: "Graphqlort"
      }
      umsaetze: [{
        betrag: "200"
        waehrung: "EUR"
      }]
      interessen: [SPORT, REISEN]
    }
  ) {
    id
  }
}
> {%
    client.test('Mutation neuer Kunde mit existierender Emailadresse: OK', () => {
        const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('Mutation neuer Kunde mit existierender Emailadresse: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('Mutation neuer Kunde mit existierender Emailadresse: body mit Fehlermeldung ohne Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        client.assert(typeof body.data === 'object', `body: ${JSON.stringify(body)}`);
        client.assert(Object.keys(body.data).length === 0, `data: ${JSON.stringify(body.data)}`);
        // TODO Optional Chaining
        const errors = body.errors;
        client.assert(Array.isArray(errors) === true, `errors: ${JSON.stringify(body.errors)}`);
        client.assert(errors.length === 1, `errors: ${JSON.stringify(body.errors)}`);
        client.assert(errors[0].message === 'Die Emailadresse alpha@acme.de existiert bereits.', `errors: ${JSON.stringify(body.errors)}`)
        client.assert(typeof errors[0].extensions.classification === 'string', `errors: ${JSON.stringify(errors)}`);
        client.assert(errors[0].extensions.classification === 'BAD_REQUEST', `errors: ${JSON.stringify(errors)}`);
        errors.map(error => error.extensions.classification)
            .forEach(classification => client.assert(classification === 'BAD_REQUEST', `classification: ${JSON.stringify(classification)}`));
    });
%}

### Einen neuen Kunden mit fehlerhaftem Geburtsdatum anlegen
GRAPHQL {{graphqlUrl}}

mutation {
  create(
    input: {
      nachname: "Graphql"
      email: "graphql@graphql.de"
      kategorie: 1
      hasNewsletter: true
      geburtsdatum: "a-b-c"
      homepage: "https://graphql.de"
      geschlecht: WEIBLICH
      familienstand: LEDIG
      adresse: {
        plz: "99999"
        ort: "Graphqlort"
      }
      umsaetze: [{
        betrag: "200"
        waehrung: "EUR"
      }]
      interessen: [SPORT, REISEN]
    }
  ) {
    id
  }
}
> {%
    client.test('Mutation neuer Kunde mit fehlerhaftem Geburtsdatum: OK', () => {
        const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('Mutation neuer Kunde mit fehlerhaftem Geburtsdatum: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('Mutation neuer Kunde mit fehlerhaftem Geburtsdatum: body mit Fehlermeldung ohne Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        client.assert(typeof body.data === 'object', `body: ${JSON.stringify(body)}`);
        client.assert(Object.keys(body.data).length === 0, `data: ${JSON.stringify(body.data)}`);
        // TODO Optional Chaining
        const errors = body.errors;
        client.assert(Array.isArray(errors) === true, `errors: ${JSON.stringify(body.errors)}`);
        client.assert(errors.length === 1, `errors: ${JSON.stringify(body.errors)}`);
        client.assert(errors[0].message === 'Das Datum a-b-c ist nicht korrekt.', `errors: ${JSON.stringify(body.errors)}`)
        client.assert(typeof errors[0].extensions.classification === 'string', `errors: ${JSON.stringify(errors)}`);
        client.assert(errors[0].extensions.classification === 'BAD_REQUEST', `errors: ${JSON.stringify(errors)}`);
        errors.map(error => error.extensions.classification)
    .forEach(classification => client.assert(classification === 'BAD_REQUEST', `classification: ${JSON.stringify(classification)}`));
    });
%}
